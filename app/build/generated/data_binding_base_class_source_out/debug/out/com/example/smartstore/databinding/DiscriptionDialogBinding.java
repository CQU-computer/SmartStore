// Generated by view binder compiler. Do not edit!
package com.example.smartstore.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.smartstore.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DiscriptionDialogBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final EditText discription;

  @NonNull
  public final Button discriptionBtnCancel;

  @NonNull
  public final Button discriptionBtnConfirm;

  @NonNull
  public final ImageView discriptionDialog;

  @NonNull
  public final LinearLayout part7;

  private DiscriptionDialogBinding(@NonNull RelativeLayout rootView, @NonNull EditText discription,
      @NonNull Button discriptionBtnCancel, @NonNull Button discriptionBtnConfirm,
      @NonNull ImageView discriptionDialog, @NonNull LinearLayout part7) {
    this.rootView = rootView;
    this.discription = discription;
    this.discriptionBtnCancel = discriptionBtnCancel;
    this.discriptionBtnConfirm = discriptionBtnConfirm;
    this.discriptionDialog = discriptionDialog;
    this.part7 = part7;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DiscriptionDialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DiscriptionDialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.discription_dialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DiscriptionDialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.discription;
      EditText discription = ViewBindings.findChildViewById(rootView, id);
      if (discription == null) {
        break missingId;
      }

      id = R.id.discription_btn_cancel;
      Button discriptionBtnCancel = ViewBindings.findChildViewById(rootView, id);
      if (discriptionBtnCancel == null) {
        break missingId;
      }

      id = R.id.discription_btn_confirm;
      Button discriptionBtnConfirm = ViewBindings.findChildViewById(rootView, id);
      if (discriptionBtnConfirm == null) {
        break missingId;
      }

      id = R.id.discription_dialog;
      ImageView discriptionDialog = ViewBindings.findChildViewById(rootView, id);
      if (discriptionDialog == null) {
        break missingId;
      }

      id = R.id.part_7;
      LinearLayout part7 = ViewBindings.findChildViewById(rootView, id);
      if (part7 == null) {
        break missingId;
      }

      return new DiscriptionDialogBinding((RelativeLayout) rootView, discription,
          discriptionBtnCancel, discriptionBtnConfirm, discriptionDialog, part7);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
